#!/bin/bash

# The below workaround is no longer needed for recent versions of less.
# It is indeed harmful, because it causes two copies of the output to appear
# whenever it would have fit on one screen. So just run less directly when
# it is new enough. As of this writing, I do not know the exact version number
# when the bug was fixed but I know it was still broken in version 487
# (Ubuntu 18.04) but fixed in version 551 (Ubuntu 20.04).

less_version=$(command less --version | sed -n '1,1 s/^less \([0-9]\+\).*/\1/p')
if [[ $less_version -gt 487 ]]; then
    exec less --quit-if-one-screen "$@"
fi

# Downloaded from:
# https://raw.githubusercontent.com/johnmellor/scripts/master/bin/least
# With slight change to $LESS options and a tiny efficiency improvement.

# This script makes --quit-if-one-screen play nice with the use of the
# alternate screen by less. That is, if it would have fit on one screen
# (so that less exited immediately, making the alternate screen disappear),
# then cat it to the primary screen.

# n.b. I posted this script to:
# http://unix.stackexchange.com/a/205260/85237

# Needed so less doesn't prevent trap from working.
set -m
# Keeps this script alive when Ctrl+C is pressed in less,
# so we still cat and rm $TMPFILE afterwards.
trap '' EXIT

TXTFILE=$(mktemp 2>/dev/null || mktemp -t 'tmp')

export LESS='-R --ignore-case --quit-if-one-screen'
if [[ -t 0 ]]; then
    # Stdin is a terminal (neither a file nor a pipe); hopefully "$@" contains a
    # filename that less can read into a pipe.
    LESS= command less "$@" | tee "$TXTFILE" | command less "$@"
else
    # Stdin is a file or pipe; pass it directly to tee.
    tee "$TXTFILE" | command less "$@"
fi

if [[ " $LESS $@" =~ \ -(-chop-long-lines|[a-jl-nq-su-zA-CE-NQ-SU-Z]*S) ]]; then
    # Don't wrap lines, since --chop-long-lines was passed to less.
    LINECOUNT=$(wc -l < "$TXTFILE")
else
    # Wrap lines like less before counting (the perl regex strips ANSI escapes).
    [[ -n $COLUMNS ]] || COLUMNS=$(tput cols)
    LINECOUNT=$(perl -pe 's/\e\[?.*?[\@-~]//g' "$TXTFILE" | fold -w "$COLUMNS" | wc -l)
fi
[[ -n $LINES ]] || LINES=$(tput lines)
if (( $LINECOUNT < $LINES )); then
    cat "$TXTFILE"
fi

rm "$TXTFILE"
